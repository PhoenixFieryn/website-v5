# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union GenericMorph = ComponentSharedButton | ComponentSharedImage | ComponentSharedLink | ComponentSlicesHero | ComponentSlicesLookingGlass | ComponentSlicesLookingGlassWithPicture | ComponentSlicesMultiImageDisplay | HeroSection | HomePage | I18NLocale | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

union HeroSectionSlicesDynamicZone = ComponentSlicesLookingGlass | ComponentSlicesLookingGlassWithPicture | ComponentSlicesMultiImageDisplay | Error

union HomePageTestDynamicZone = ComponentSlicesHero | ComponentSlicesLookingGlass | ComponentSlicesLookingGlassWithPicture | ComponentSlicesMultiImageDisplay | Error

type ComponentSharedButton {
    color: ENUM_COMPONENTSHAREDBUTTON_COLOR!
    icon: ENUM_COMPONENTSHAREDBUTTON_ICON
    id: ID!
    label: String
    link: ComponentSharedLink
    size: ENUM_COMPONENTSHAREDBUTTON_SIZE!
}

type ComponentSharedImage {
    alt: String
    height: Int!
    id: ID!
    image: UploadFileEntityResponse!
    width: Int!
}

type ComponentSharedLink {
    color: ENUM_COMPONENTSHAREDLINK_COLOR!
    href: String!
    id: ID!
    label: String!
    target: ENUM_COMPONENTSHAREDLINK_TARGET
}

type ComponentSlicesHero {
    description: String
    id: ID!
    title: String!
}

type ComponentSlicesLookingGlass {
    buttons(filters: ComponentSharedButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedButton]
    description: String
    floatingLinks(filters: ComponentSharedLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedLink]
    id: ID!
    title: String
}

type ComponentSlicesLookingGlassWithPicture {
    id: ID!
    image: ComponentSharedImage!
    imagePosition: ENUM_COMPONENTSLICESLOOKINGGLASSWITHPICTURE_IMAGEPOSITION!
    lookingGlass: ComponentSlicesLookingGlass
}

type ComponentSlicesMultiImageDisplay {
    id: ID!
    images(filters: ComponentSharedImageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedImage]!
}

type Error {
    code: String!
    message: String
}

type HeroSection {
    createdAt: DateTime
    hero: ComponentSlicesHero!
    holoImage: ComponentSharedImage
    publishedAt: DateTime
    slices: [HeroSectionSlicesDynamicZone]
    updatedAt: DateTime
}

type HeroSectionEntity {
    attributes: HeroSection
    id: ID
}

type HeroSectionEntityResponse {
    data: HeroSectionEntity
}

type HeroSectionEntityResponseCollection {
    data: [HeroSectionEntity!]!
    meta: ResponseCollectionMeta!
}

type HeroSectionRelationResponseCollection {
    data: [HeroSectionEntity!]!
}

type HomePage {
    createdAt: DateTime
    hero_sections(filters: HeroSectionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): HeroSectionRelationResponseCollection
    publishedAt: DateTime
    test: [HomePageTestDynamicZone]
    updatedAt: DateTime
}

type HomePageEntity {
    attributes: HomePage
    id: ID
}

type HomePageEntityResponse {
    data: HomePageEntity
}

type I18NLocale {
    code: String
    createdAt: DateTime
    name: String
    updatedAt: DateTime
}

type I18NLocaleEntity {
    attributes: I18NLocale
    id: ID
}

type I18NLocaleEntityResponse {
    data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
    data: [I18NLocaleEntity!]!
    meta: ResponseCollectionMeta!
}

type Mutation {
    createHeroSection(data: HeroSectionInput!): HeroSectionEntityResponse
    createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
    "Create a new role"
    createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
    "Create a new user"
    createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
    deleteHeroSection(id: ID!): HeroSectionEntityResponse
    deleteHomePage: HomePageEntityResponse
    deleteUploadFile(id: ID!): UploadFileEntityResponse
    "Delete an existing role"
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
    "Delete an existing user"
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    "Confirm an email users email address"
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    "Request a reset password token"
    forgotPassword(email: String!): UsersPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
    "Register a user"
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    removeFile(id: ID!): UploadFileEntityResponse
    "Reset user password. Confirm with a code (resetToken from forgotPassword)"
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
    updateHeroSection(data: HeroSectionInput!, id: ID!): HeroSectionEntityResponse
    updateHomePage(data: HomePageInput!): HomePageEntityResponse
    updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
    "Update an existing role"
    updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
    "Update an existing user"
    updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
    page: Int!
    pageCount: Int!
    pageSize: Int!
    total: Int!
}

type Query {
    heroSection(id: ID): HeroSectionEntityResponse
    heroSections(filters: HeroSectionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): HeroSectionEntityResponseCollection
    homePage(publicationState: PublicationState = LIVE): HomePageEntityResponse
    i18NLocale(id: ID): I18NLocaleEntityResponse
    i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
    me: UsersPermissionsMe
    uploadFile(id: ID): UploadFileEntityResponse
    uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
    usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
    usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
    usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
    pagination: Pagination!
}

type UploadFile {
    alternativeText: String
    caption: String
    createdAt: DateTime
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [GenericMorph]
    size: Float!
    updatedAt: DateTime
    url: String!
    width: Int
}

type UploadFileEntity {
    attributes: UploadFile
    id: ID
}

type UploadFileEntityResponse {
    data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
    data: [UploadFileEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsPermission {
    action: String!
    createdAt: DateTime
    role: UsersPermissionsRoleEntityResponse
    updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
    attributes: UsersPermissionsPermission
    id: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
    data: [UsersPermissionsPermissionEntity!]!
}

type UsersPermissionsRole {
    createdAt: DateTime
    description: String
    name: String!
    permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
    type: String
    updatedAt: DateTime
    users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
    attributes: UsersPermissionsRole
    id: ID
}

type UsersPermissionsRoleEntityResponse {
    data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
    data: [UsersPermissionsRoleEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime
    email: String!
    provider: String
    role: UsersPermissionsRoleEntityResponse
    updatedAt: DateTime
    username: String!
}

type UsersPermissionsUserEntity {
    attributes: UsersPermissionsUser
    id: ID
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
    data: [UsersPermissionsUserEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
    data: [UsersPermissionsUserEntity!]!
}

enum ENUM_COMPONENTSHAREDBUTTON_COLOR {
    autoS400O10
    blackS400O10
    greenS400O10
    purpleS400O10
    redS400O10
    skyS400O10
    whiteS400O10
}

enum ENUM_COMPONENTSHAREDBUTTON_ICON {
    next
    previous
}

enum ENUM_COMPONENTSHAREDBUTTON_SIZE {
    md
    sm
}

enum ENUM_COMPONENTSHAREDLINK_COLOR {
    autoS400O10
    blackS400O10
    greenS400O10
    purpleS400O10
    redS400O10
    skyS400O10
    whiteS400O10
}

enum ENUM_COMPONENTSHAREDLINK_TARGET {
    blank
}

enum ENUM_COMPONENTSLICESLOOKINGGLASSWITHPICTURE_IMAGEPOSITION {
    left
    right
}

enum PublicationState {
    LIVE
    PREVIEW
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

scalar HeroSectionSlicesDynamicZoneInput

scalar HomePageTestDynamicZoneInput

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload

input BooleanFilterInput {
    and: [Boolean]
    between: [Boolean]
    contains: Boolean
    containsi: Boolean
    endsWith: Boolean
    eq: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    not: BooleanFilterInput
    notContains: Boolean
    notContainsi: Boolean
    notIn: [Boolean]
    notNull: Boolean
    null: Boolean
    or: [Boolean]
    startsWith: Boolean
}

input ComponentSharedButtonFiltersInput {
    and: [ComponentSharedButtonFiltersInput]
    color: StringFilterInput
    icon: StringFilterInput
    label: StringFilterInput
    link: ComponentSharedLinkFiltersInput
    not: ComponentSharedButtonFiltersInput
    or: [ComponentSharedButtonFiltersInput]
    size: StringFilterInput
}

input ComponentSharedImageFiltersInput {
    alt: StringFilterInput
    and: [ComponentSharedImageFiltersInput]
    height: IntFilterInput
    not: ComponentSharedImageFiltersInput
    or: [ComponentSharedImageFiltersInput]
    width: IntFilterInput
}

input ComponentSharedImageInput {
    alt: String
    height: Int
    id: ID
    image: ID
    width: Int
}

input ComponentSharedLinkFiltersInput {
    and: [ComponentSharedLinkFiltersInput]
    color: StringFilterInput
    href: StringFilterInput
    label: StringFilterInput
    not: ComponentSharedLinkFiltersInput
    or: [ComponentSharedLinkFiltersInput]
    target: StringFilterInput
}

input ComponentSlicesHeroFiltersInput {
    and: [ComponentSlicesHeroFiltersInput]
    description: StringFilterInput
    not: ComponentSlicesHeroFiltersInput
    or: [ComponentSlicesHeroFiltersInput]
    title: StringFilterInput
}

input ComponentSlicesHeroInput {
    description: String
    id: ID
    title: String
}

input DateTimeFilterInput {
    and: [DateTime]
    between: [DateTime]
    contains: DateTime
    containsi: DateTime
    endsWith: DateTime
    eq: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    ne: DateTime
    not: DateTimeFilterInput
    notContains: DateTime
    notContainsi: DateTime
    notIn: [DateTime]
    notNull: Boolean
    null: Boolean
    or: [DateTime]
    startsWith: DateTime
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FloatFilterInput {
    and: [Float]
    between: [Float]
    contains: Float
    containsi: Float
    endsWith: Float
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    not: FloatFilterInput
    notContains: Float
    notContainsi: Float
    notIn: [Float]
    notNull: Boolean
    null: Boolean
    or: [Float]
    startsWith: Float
}

input HeroSectionFiltersInput {
    and: [HeroSectionFiltersInput]
    createdAt: DateTimeFilterInput
    hero: ComponentSlicesHeroFiltersInput
    holoImage: ComponentSharedImageFiltersInput
    id: IDFilterInput
    not: HeroSectionFiltersInput
    or: [HeroSectionFiltersInput]
    publishedAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
}

input HeroSectionInput {
    hero: ComponentSlicesHeroInput
    holoImage: ComponentSharedImageInput
    publishedAt: DateTime
    slices: [HeroSectionSlicesDynamicZoneInput!]
}

input HomePageInput {
    hero_sections: [ID]
    publishedAt: DateTime
    test: [HomePageTestDynamicZoneInput!]
}

input I18NLocaleFiltersInput {
    and: [I18NLocaleFiltersInput]
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    name: StringFilterInput
    not: I18NLocaleFiltersInput
    or: [I18NLocaleFiltersInput]
    updatedAt: DateTimeFilterInput
}

input IDFilterInput {
    and: [ID]
    between: [ID]
    contains: ID
    containsi: ID
    endsWith: ID
    eq: ID
    gt: ID
    gte: ID
    in: [ID]
    lt: ID
    lte: ID
    ne: ID
    not: IDFilterInput
    notContains: ID
    notContainsi: ID
    notIn: [ID]
    notNull: Boolean
    null: Boolean
    or: [ID]
    startsWith: ID
}

input IntFilterInput {
    and: [Int]
    between: [Int]
    contains: Int
    containsi: Int
    endsWith: Int
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    not: IntFilterInput
    notContains: Int
    notContainsi: Int
    notIn: [Int]
    notNull: Boolean
    null: Boolean
    or: [Int]
    startsWith: Int
}

input JSONFilterInput {
    and: [JSON]
    between: [JSON]
    contains: JSON
    containsi: JSON
    endsWith: JSON
    eq: JSON
    gt: JSON
    gte: JSON
    in: [JSON]
    lt: JSON
    lte: JSON
    ne: JSON
    not: JSONFilterInput
    notContains: JSON
    notContainsi: JSON
    notIn: [JSON]
    notNull: Boolean
    null: Boolean
    or: [JSON]
    startsWith: JSON
}

input PaginationArg {
    limit: Int
    page: Int
    pageSize: Int
    start: Int
}

input StringFilterInput {
    and: [String]
    between: [String]
    contains: String
    containsi: String
    endsWith: String
    eq: String
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    not: StringFilterInput
    notContains: String
    notContainsi: String
    notIn: [String]
    notNull: Boolean
    null: Boolean
    or: [String]
    startsWith: String
}

input UploadFileFiltersInput {
    alternativeText: StringFilterInput
    and: [UploadFileFiltersInput]
    caption: StringFilterInput
    createdAt: DateTimeFilterInput
    ext: StringFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    height: IntFilterInput
    id: IDFilterInput
    mime: StringFilterInput
    name: StringFilterInput
    not: UploadFileFiltersInput
    or: [UploadFileFiltersInput]
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    size: FloatFilterInput
    updatedAt: DateTimeFilterInput
    url: StringFilterInput
    width: IntFilterInput
}

input UploadFileInput {
    alternativeText: String
    caption: String
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    size: Float
    url: String
    width: Int
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

input UsersPermissionsPermissionFiltersInput {
    action: StringFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    not: UsersPermissionsPermissionFiltersInput
    or: [UsersPermissionsPermissionFiltersInput]
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input UsersPermissionsRoleFiltersInput {
    and: [UsersPermissionsRoleFiltersInput]
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    id: IDFilterInput
    name: StringFilterInput
    not: UsersPermissionsRoleFiltersInput
    or: [UsersPermissionsRoleFiltersInput]
    permissions: UsersPermissionsPermissionFiltersInput
    type: StringFilterInput
    updatedAt: DateTimeFilterInput
    users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
    description: String
    name: String
    permissions: [ID]
    type: String
    users: [ID]
}

input UsersPermissionsUserFiltersInput {
    and: [UsersPermissionsUserFiltersInput]
    blocked: BooleanFilterInput
    confirmationToken: StringFilterInput
    confirmed: BooleanFilterInput
    createdAt: DateTimeFilterInput
    email: StringFilterInput
    id: IDFilterInput
    not: UsersPermissionsUserFiltersInput
    or: [UsersPermissionsUserFiltersInput]
    password: StringFilterInput
    provider: StringFilterInput
    resetPasswordToken: StringFilterInput
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
    username: StringFilterInput
}

input UsersPermissionsUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    username: String
}
